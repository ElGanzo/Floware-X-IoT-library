# TODO: remove once the script is ultimated
OBJECT_DETECTION

PROCEDURE global OBJECT_DETECTION
{
    # 1) SET MODEL FOR THE OBJECT DETECTION PURPOSE
    CC "Modeling" GET_ACT_MODEL
	SETL modelid:(modelid)
    SET emptyOriginalModelId:(modelid)
	IF (modelid = -1) {
        CC "AdoScript" ERRORBOX "Please select an empty IoT scenario model first!" title:("Invalid model")
        EXIT
    }
	CC "Core" GET_MODEL_MODELTYPE modelid:(modelid)
    CC "Core" GET_ATTR_VAL objid:(modelid) attrname:("Model Type")
    IF(val = "PSM" OR modeltype != "IoT Scenario" ) {
        CC "AdoScript" ERRORBOX "Please select an empty IoT scenario model first!" title:("Invalid model")
        EXIT
    } 

    PRESET_PSM platform:("Object_detection")

    CC "Modeling" GET_ACT_MODEL
	SETL newModelId:(modelid)

    # 2) READ .JSON FILE: create elements and assign them their values (read from the json file)

    # Select the .json file path
    CC "AdoScript" FILE_DIALOG open
        filter1:"JSON Files" type1:"*.json" default-ext:"json"
    SET filePath:(path)
    IF (filePath = "") {
        CC "AdoScript" ERRORBOX ("No file selected. Process aborted.")
        EXIT
    }

    # Read JSON file
    CC "AdoScript" FREAD file:(filePath)
    IF (ecode != 0) {
        CC "AdoScript" ERRORBOX ("The file is not readable!") ok
        EXIT
    }

    # Convert file content to JSON
    SETL specs:(fromJson(text))
    SET devicesArray:(specs["devices"])

    EXTRACT_CLASSIDS    # always usefull

    GET_SPECIFICATIONS platform: ("Object_detection") specs: specs
    SET specifications: (specs)

    # create elements from the json
	CREATE_NEW_OBJECTS modelid:newModelId devices:devicesArray

    # 2.1) NEW IMAGES for different devices? In case they will be new classes with same or different values.

    # 3) PLACE ELEMENTS IN THE MODEL (TODO: randomically? If not, we do this operation in the step aside)



    #TODO  In the end, delete the empty model
    CC "Core" DELETE_MODEL modelid:(emptyOriginalModelId)
}

# Create new object and set new name (and Name) value
PROCEDURE global CREATE_NEW_OBJECTS 
modelid:reference
devices:reference
{
    FOR i from:0 to:(LEN devices-1) {
		SETL deviceType:(devices[i] SUB "deviceType")
        SETL capability1:(devices[i] SUB "capability1")
		SETL capability2:(devices[i] SUB "capability2")
		SETL specification:(devices[i] SUB "Nspecification")
		SETL xPosition:(devices[i] SUB "Xposition")
        SETL yPosition:(devices[i] SUB "Yposition")


	    CC "Core" CREATE_OBJ modelid:(modelid) classid:(deviceClassId)
    	SETL newObjId:(objid)
        SET_SPECIFICATIONS objID: (STR newObjId) specs: (specifications)
	    CC "Core" SET_ATTR_VAL objid:(newObjId) attrname:("name") val:(deviceType)
    	CC "Core" SET_ATTR_VAL objid:(newObjId) attrname:("Name") val:(deviceType)

        SETL x:(CM(xPosition))
        SETL y:(CM(yPosition))

        CC "Modeling" SET_OBJ_POS objid:(newObjId) x:(x) y:(y)
        
		CC "Core" GET_ATTR_ID classid:(deviceClassId) attrname:("specification")

		CC "Core" GET_REC_ATTR_ROW_ID objid:(newObjId) attrid:(attrid) index:1
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(capability1)

        CC "Core" GET_REC_ATTR_ROW_ID objid:(newObjId) attrid:(attrid) index:2
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(capability2)

		CC "Core" GET_REC_ATTR_ROW_ID objid:(newObjId) attrid:(attrid) index:3
        CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(specification)
    }
}

# Call this procedure once to avoid repeating n times the GET_CLASS_ID command call
PROCEDURE global EXTRACT_CLASSIDS 
{
	# Classes
	CC "Core" GET_CLASS_ID classname:("device")
	SETG deviceClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("attribute")
	SETG attributeClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("Device Operation")
	SETG deviceOperationClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("widget")
	SETG widgetClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("location")
	SETG locationClassId:(classid)

	# Relation classes
	CC "Core" GET_CLASS_ID classname:("hasAttribute")
	SETG hasAttributeClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("hasOperation")
	SETG hasOperationClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("hasWidget")
	SETG hasWidgetClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("hasLocation")
	SETG hasLocationClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("devHasWidget")
	SETG devHasWidgetClassId:(classid)
}
