# Script that imports information about Devices, Device templates and Dashboards from Azure:
#	it creates a new model within the information got by API calls.

# NOTES:
#	- the device group id is searched only by "displayName" attribute, got by API call:
# 		it may be not similar to the "device" name, so it could be empty sometimes

# API calls format is inside the "azure.json" file


#COMMENT OUT THE FOLLOWING LINE TO CALL THE SCRIPT FROM EXT COUPLING AS PROCEDURE INSTEAD OF DOING "EXECUTE file:(<local_path>\\models_from_azure.asc)"
MODELS_FROM_AZURE

PROCEDURE global MODELS_FROM_AZURE
{    
	# CC "Explorer" GET_SELECTED_MODELGROUPS

	CC "Modeling" GET_ACT_MODEL
	SETL modelid:(modelid)
	IF (modelid = -1) {
        CC "AdoScript" WARNINGBOX ("Select an empty IoT scenario PSM model to proceed")
        EXIT
    }
	CC "Core" GET_MODEL_MODELTYPE modelid:(modelid)
    CC "Core" GET_ATTR_VAL objid:(modelid) attrname:("Platform")
    SETL platform: (val)
    CC "Core" GET_ATTR_VAL objid:(modelid) attrname:("Model Type")
    IF(val = "PIM" OR modeltype != "IoT Scenario" OR platform != "Azure") {
        CC "AdoScript" ERRORBOX "Select an empty IoT scenario - Azure PSM model first!" title:("Invalid model")
        EXIT
    }	

	CC "Modeling" GET_ACT_MODEL
	SETL a_dstmodelid:(modelid)
	CC "Modeling" OPEN modelids:(STR a_dstmodelid)

	GET_SPECIFICATIONS platform: ("Azure") specs: specs
    SET specifications: (specs)

	# If the original model still remains as "PIM", it means the PRESET_PSM procedure didn't success
	#CC "Core" GET_ATTR_VAL objid:(a_dstmodelid) attrname:("Model Type")
	#CC "AdoScript" INFOBOX("a dst modelid " + STR a_dstmodelid)
	#IF(val="PIM") {
	#	CC "Core" DELETE_MODEL modelid:(a_dstmodelid)
	#	EXIT
	#}

	# Get application name TODO accomedare
	SET applicationSubdomain: ("apptogepi")
	#CC "AdoScript" EDITFIELD title:"Azure's application subdomain" caption:"Application subdomain:" text:"MyAzureApplication"
	#IF (ecode != 0) {
    #    EXIT
    #}
    #SET applicationSubdomain: (text)

	# Get API token TODO poi ripristinare
	SET headers: (map())
	#CC "AdoScript" EDITFIELD title:"Azure's API token" caption:"API token (find it at 'Permissions>API tokens'):" text:"API token"
	#IF (ecode != 0) {
    #    EXIT
    #}
	#SET apiToken:(text)

	# GLOBAL API TOKEN (used by some other procedures in this file) keep attention please
	SET apiToken:("SharedAccessSignature sr=368b8d24-e2f2-4454-844b-93d29bc1dde6&sig=NZqVcdPZH9NFQkuQBvz65txwipMrhJ%2FrUfQBe%2BOk%2FBc%3D&skn=genzo&se=1708081185061")
	SET headers["Authorization"]: (apiToken)
	#SETL headers["Content-Type"]:("application/json;odata=verbose") todo forse serve solo per le PUT
 
	#SETL mioValue:0
	#GET_ENDPOINT iType: ("device") operation: ("get_devices") values: ({mioValue}) endpoint: endpoint method: method  # values: ({selectedAppID})
    #CC "AdoScript" INFOBOX("mioValue " + STR mioValue)
	#MAKE_HTTP_REQUEST path: (endpoint) reqbody: ("") reqHeader: (header) method: (method) mapRespBody: response respstat: respstat
	
	SETL devicesArray:(map())
	GET_AZURE_OBJECTS objectFromJsonStructure: "device" method: "get_devices" objectsArray: devicesArray

	# not from "attribute" but from "device" cause we can have a device template built up by "Device Operations" and "attribute" objects, "device" includes them all
	SETL deviceTemplatesArray:(map())
	GET_AZURE_OBJECTS objectFromJsonStructure: "device_template" method: "get_devices_templates" objectsArray: deviceTemplatesArray


	SETL dashboardsArray:(map())
	GET_AZURE_OBJECTS objectFromJsonStructure: "dashboard" method: "get_dashboards" objectsArray: dashboardsArray  # "dashboard" used to interact with "widget" objects


	SETL deviceGroupsArray:(map())
	GET_AZURE_OBJECTS objectFromJsonStructure: "device_group" method: "get_device_groups" objectsArray: deviceGroupsArray

	EXTRACT_CLASSIDS

	# For each device in the device list create new objects
	
	SETL objPosX:(2cm)
	SETL objPosY:(2cm)

	# the equivalent of "FOR <device> in <devicesArray>"
	FOR i from:0 to:(LEN devicesArray-1) {
		SET deviceName: (devicesArray[i]["id"])

		INITIALIZE_NEW_OBJECT modelid:a_dstmodelid classid:deviceClassId objectName:deviceName newObjId:deviceId

		SET_SPECIFICATIONS objID: (STR deviceId) specs: (specifications)

		CC "Core" GET_ATTR_ID classid:(deviceClassId) attrname:("specification")
		CC "Core" GET_REC_ATTR_ROW_ID objid:(deviceId) attrid:(attrid) index:1

		FOR h from:0 to:(LEN deviceGroupsArray-1) {
			SETL id:(deviceGroupsArray[h] SUB "displayName")	# COULD BE NOT ACCURATE ENOUGH searching by displayName, could be empty at the end
			SETL x:(search(id, deviceName, 0))		
			# if we found the device group id with the same name as the device assign the device group id to the "device" object 
			IF ( x != -1 ) {
				SETL deviceGroupId:(deviceGroupsArray[h] SUB "id")
				CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(deviceGroupId)
			}
		}

		CC "Modeling" SET_OBJ_POS objid:(deviceId) x:(objPosX) y:(objPosY)

		# the equivalent of "FOR <deviceTemplate> in <deviceTemplatesArray>"
		FOR j from:0 to:(LEN deviceTemplatesArray-1) {
			SETL capabilityModel: (deviceTemplatesArray[j]["capabilityModel"]) # attribute "displayName" isn't reliable
			SETL deviceTemplateId: (capabilityModel["@id"])
			SETL x:(search(deviceTemplateId, deviceName, 0))		
			# if we found the device template with the same name as the device
			IF ( x != -1 ) {
				SETL deviceTemplateName:(deviceName)	# id is the same as the device id
				SETL capabilities:(capabilityModel["contents"])

				# centrate the "device" and create new line for "attribute" & "Device Operation" objects
				IF(LEN capabilities = 1) {
					CC "Modeling" SET_OBJ_POS objid:(deviceId) x:(objPosX) y:(objPosY)
					SETL objPosY:(objPosY+5cm)
				} ELSE {
					CC "Modeling" SET_OBJ_POS objid:(deviceId) x:(CM(((LEN capabilities-1)/2)*5)) y:(objPosY)
					SETL objPosY:(objPosY+5cm)
				}

				FOR k from:0 to:(LEN capabilities-1) {
					SETL capabilityName:(capabilities[k]["name"])
					SETL type:(capabilities[k]["@type"])

					# "@type": "Command",
					IF(type(type) = "string") {

						INITIALIZE_NEW_OBJECT modelid:a_dstmodelid classid:deviceOperationClassId objectName:capabilityName newObjId:deviceOperationId

						# check if there's a description
						IF(type(capabilities[k]["description"]) = "string") {
							CC "Core" SET_ATTR_VAL objid:(deviceOperationId) attrname:("description") val:(capabilities[k]["description"])
						}

						# then beautify new object position
						CC "Modeling" SET_OBJ_POS objid:(deviceOperationId) x:(objPosX) y:(objPosY)
						SETL objPosX:(objPosX+5cm)
            			CC "Core" CREATE_CONNECTOR modelid:(a_dstmodelid) fromobjid:(deviceId) toobjid:(deviceOperationId) classid:(hasOperationClassId)

					} ELSIF(type(type) = "array") {

						# "@type": ["Telemetry","<capabilitySemanticType>","NumberValue"],
						# usually the psm_type is specified in the 2nd element of the "@type" array of the REST GET
						SETL capabilitySemanticType:(type[1])
						
						INITIALIZE_NEW_OBJECT modelid:a_dstmodelid classid:attributeClassId objectName:capabilityName newObjId:attributeId
						
						CC "Core" SET_ATTR_VAL objid:(attributeId) attrname:("psm_type") val:(capabilitySemanticType)
						# check if there's a description
						IF(type(capabilities[k]["description"]) = "string") {
							CC "Core" SET_ATTR_VAL objid:(attributeId) attrname:("description") val:(capabilities[k]["description"])
						}
						SET_SPECIFICATIONS objID: (STR attributeId) specs: (specifications)

						FILL_SPECIFICATION_BY_PSM_TYPE type:capabilitySemanticType objID:attributeId modelID:a_dstmodelid

						# as the device template export from ADOxx are structured the json response has the "unit" parameter and
						# only if is specified there's also a parameter "maxValue" (take a look at PSM_TO_FILE>Azure procedure)

						CC "Core" GET_ATTR_ID classid:(attributeClassId) attrname:("specification")
						CC "Core" GET_REC_ATTR_ROW_ID objid:(attributeId) attrid:(attrid) index:1
						SETL unit:(capabilities[k]["unit"])
						IF (type(capabilities[k]["maxValue"]) != "undefined") {
							SETL maxValue:(capabilities[k]["maxValue"])
							CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(maxValue)
						} ELSE {
							CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(unit)
						}

						CC "Modeling" SET_OBJ_POS objid:(attributeId) x:(objPosX) y:(objPosY)
						SETL objPosX:(objPosX+5cm)
						CC "Core" CREATE_CONNECTOR modelid:(a_dstmodelid) fromobjid:(deviceId) toobjid:(attributeId) classid:(hasAttributeClassId)
					}
				}
			}
		}
		SETL objPosX:(2cm)
		SETL objPosY:(objPosY+10cm)
	}

	# the equivalent of "FOR <dashboard> in <dashboardsArray>"
	FOR i from:0 to:(LEN dashboardsArray-1) 
	{
		SETL tiles:(dashboardsArray[i]["tiles"])
		FOR j from:0 to:(LEN tiles-1) 
		{
			SETL widgetName:(tiles[j]["displayName"])

			SETL configuration:(tiles[j]["configuration"])

			SETL widgetType:(configuration["type"])
			IF(widgetType = "lineChart") {
				SETL widgetType:"Line Chart"
			} ELSIF(widgetType = "lkv") {
				SETL widgetType:"Last Known Value (lkv)"
			}

			SETL widgetsAttachedTo:(configuration["capabilities"])
			
			IF(type(configuration["capabilities"]) = "undefined") {
				NEXT
			}

			# if there are no capabilities linked to the dashboard but only a device create the "widget" object next to the "device" object
			IF(configuration["capabilities"].length = 0) {
				SETL devArr:(configuration["devices"])
				SETL deviceAttachedTo:(devArr[0])

				# get the "device" object coordinate and set new "widget" object position next to it
				CC "Core" GET_OBJ_ID modelid:(a_dstmodelid) classid:(deviceClassId) objname:(deviceAttachedTo)
				SETL devObjId:(objid)
				CC "Core" GET_ATTR_ID classid:(deviceClassId) attrname:"Position"
				CC "Core" GET_ATTR_VAL objid:(devObjId) attrid:(attrid)
        		LEO parse:(val) get-tmm-value:x:"x" get-tmm-value:y:"y"
        		SET x:(x + 5cm)

				SETL newWidgetName:(deviceAttachedTo + " - widget")
				INITIALIZE_NEW_OBJECT modelid:a_dstmodelid classid:widgetClassId objectName:newWidgetName newObjId:widget
				CC "Core" SET_ATTR_VAL objid:(widget) attrname:("psm_type") val:(widgetType)
				SET_SPECIFICATIONS objID: (STR widget) specs: (specifications)

        		CC "Modeling" SET_OBJ_POS objid:(widget) x:(x) y:(y)
				SET x:(x+5cm)
				CC "Core" CREATE_CONNECTOR modelid:(a_dstmodelid) fromobjid:(devObjId) toobjid:(widget) classid:(devHasWidgetClassId)

			} ELSE {
				# else, link the new "widget" objects underneath the "attribute" objects
				SETL capabilitiesArray:(configuration["capabilities"])
				FOR k from:0 to:(LEN capabilitiesArray-1) {

					SETL capability:(capabilitiesArray[k])
					SETL attributeObjectName:(capability["capability"])

					# get the "attribute" object coordinate and set new "widget" object position at the bottom
					CC "Core" GET_OBJ_ID modelid:(a_dstmodelid) classid:(attributeClassId) objname:(attributeObjectName)
					SETL attrObjId:(objid)
					CC "Core" GET_ATTR_ID classid:(attributeClassId) attrname:"Position"
					CC "Core" GET_ATTR_VAL objid:(attrObjId) attrid:(attrid)
        			LEO parse:(val) get-tmm-value:x:"x" get-tmm-value:y:"y"
        			SET y:(y + 5cm)
					
					SETL newWidgetName:(attributeObjectName + " - "+ widgetType)
					INITIALIZE_NEW_OBJECT modelid:a_dstmodelid classid:widgetClassId objectName:newWidgetName newObjId:widget
					CC "Core" SET_ATTR_VAL objid:(widget) attrname:("psm_type") val:(widgetType)
					SET_SPECIFICATIONS objID: (STR widget) specs: (specifications)

        			CC "Modeling" SET_OBJ_POS objid:(widget) x:(x) y:(y)
					CC "Core" CREATE_CONNECTOR modelid:(a_dstmodelid) fromobjid:(attrObjId) toobjid:(widget) classid:(hasWidgetClassId)
				}
			}
		}
	}
	CC "Core" SAVE_MODEL modelid:(a_dstmodelid)
}

# TODO: evolve this procedure in future if we need to use parameters
# tip: take a look at "Export.asc", this procedure is inspired by the GET_ENDPOINT procedure 
PROCEDURE global GET_AZURE_OBJECTS
objectFromJsonStructure: string
method: string
objectsArray:reference
{
	GET_SPECIFICATIONS platform: ("Azure") specs: specs
	SETL fillUrl: ( ( ( (specs SUB objectFromJsonStructure) SUB "api") SUB method) SUB "path")

	SETL url: ("https://"+applicationSubdomain+".azureiotcentral.com/"+fillUrl)
	HTTP_SEND_REQUEST(url) str_method:("GET") map_reqheaders:(headers) str_reqbody:("") val_respcode:respstat map_respheaders:respheaders str_respbody:str_respbody
	SETL mapRespBody: (fromJson(str_respbody))
	SETL objectsArray:(mapRespBody["value"])
}

# Create new object and set new name (and Name) value
PROCEDURE global INITIALIZE_NEW_OBJECT 
modelid:reference
classid:reference
objectName:reference
newObjId:reference
{
	CC "Core" CREATE_OBJ modelid:(a_dstmodelid) classid:(classid)
	SETL newObjId:(objid)
	CC "Core" SET_ATTR_VAL objid:(newObjId) attrname:("name") val:(objectName)
	CC "Core" SET_ATTR_VAL objid:(newObjId) attrname:("Name") val:(objectName)
}

# Call this procedure once to avoid repeating n times the GET_CLASS_ID command call
PROCEDURE global EXTRACT_CLASSIDS 
{
	# Classes
	CC "Core" GET_CLASS_ID classname:("device")
	SETG deviceClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("attribute")
	SETG attributeClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("Device Operation")
	SETG deviceOperationClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("widget")
	SETG widgetClassId:(classid)

	# Relation classes
	CC "Core" GET_CLASS_ID classname:("hasAttribute")
	SETG hasAttributeClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("hasOperation")
	SETG hasOperationClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("hasWidget")
	SETG hasWidgetClassId:(classid)
	CC "Core" GET_CLASS_ID classname:("devHasWidget")
	SETG devHasWidgetClassId:(classid)
}

# procedure extracted by PSM_TYPES.asc file
# 
# 	1. Get the psm_type by the "attribute" object
#	2. manually select the psm_type by the value passed from the GET http 
# 	3. by selecting the psm_type this procedure fills "specification" table
PROCEDURE global FILL_SPECIFICATION_BY_PSM_TYPE
type:reference
objID:reference
modelID:reference
{
	CC "Core" GET_CLASS_ID objid:(objID)
    CC "Core" GET_CLASS_NAME classid:(classid)
    CC "Core" SET_ATTR_VAL objid:(objID) attrname:"psm_type" val:(type)
	
	SET class:(specs[classname][0][type])
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")

    IF (attrid != -1 AND type(class["specs"]) = "map") {
        SET attrs:(mapKeysArray(class["specs"]))
        CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objID) attrid:(attrid)
        FOR r in:(rowids) {
            CC "Core" REMOVE_REC_ROW objid:(objID) attrid:(attrid) rowid:(VAL r)
        }
        FOR j from:0 to:(attrs.length-1) {
            # Add attribute to specification table
            SET attrClass:(class["specs"][attrs[j]])
            CC "Core" ADD_REC_ROW objid:(objID) attrid:(attrid)
            CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:(attrs[j])
            IF (type(attrClass) = "map") {
                CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:(attrClass["type"])
                CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:(attrClass["description"])
            }
            IF ((ecode)!=0) {
                CC "AdoScript" ERRORBOX ("Error adding a row to attribute \""+(attrs[j])+"\"")
                EXIT
            }
        }
   	}
}

 