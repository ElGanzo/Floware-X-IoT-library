# Script that imports information about Devices, Device templates and Dashboards from Azure:
#	it creates a new model within the information got by API calls.

# API calls format is inside the "azure.json" file


#COMMENT OUT THE FOLLOWING LINE TO CALL THE SCRIPT FROM EXT COUPLING AS PROCEDURE INSTEAD OF DOING "EXECUTE file:(<local_path>\\models_from_azure.asc)"
MODELS_FROM_AZURE

# TODO: prendere la stringa per le chiamate API da "azure.json" (guarda thingsboard.json ---> path, type, return) 
PROCEDURE global MODELS_FROM_AZURE
{    
	# todo accomedare per bene, prendere esempio dagli script di davide, prima fare quelli appena torna da milano
	# CC "Explorer" GET_SELECTED_MODELGROUPS

	CC "CoreUI" MODEL_SELECT_BOX without-models mgroup-sel title:"Select a target modelgroup for new IoT Scenario - PIM model"
    IF (endbutton != "ok") {
        EXIT
    }
	CC "AdoScript" EDITFIELD title:("Insert new model name...") caption:("~Modelname:")
    IF (ecode != 0) {
    	EXIT
    }
    CC "Core" CREATE_MODEL modeltype:("IoT Scenario") modelname:(text) version:"" mgroups:(mgroupids)
	SET a_dstmodelid:(modelid)

	# PRESET_PSM platform:"Azure"
	CC "Modeling" OPEN modelids:(STR a_dstmodelid)
	CC "Modeling" SET_VIEW_MODE modelid:(a_dstmodelid) mode-name:"PSM"
    CC "Core" SET_ATTR_VAL objid:(a_dstmodelid) attrname:"Model Type" val:("PSM")
    CC "Core" SET_ATTR_VAL objid:(a_dstmodelid) attrname:"Platform" val:("Azure")

	# If the original model still remains as "PIM", it means the PRESET_PSM procedure didn't success
	#CC "Core" GET_ATTR_VAL objid:(a_dstmodelid) attrname:("Model Type")
	#CC "AdoScript" INFOBOX("a dst modelid " + STR a_dstmodelid)
	#IF(val="PIM") {
	#	CC "Core" DELETE_MODEL modelid:(a_dstmodelid)
	#	EXIT
	#}

	# TODO forse si puo indicare tutto come Subdomain anziche name, name puo essere confuso, ci possono essere dei fraintendimenti


	# Get application name TODO accomedare
	SET applicationURL: ("apptogepi")
	#CC "AdoScript" EDITFIELD title:"Azure's application name" caption:"Application name:" text:"MyAzureApplication"
	#IF (ecode != 0) {
    #    EXIT
    #}
    #SET applicationURL: (text)

	# Get API token TODO poi ripristinare
	SETL headers: (map())
	#CC "AdoScript" EDITFIELD title:"Azure's API token" caption:"API token (find it at 'Permissions>API tokens'):" text:"API token"
	#IF (ecode != 0) {
    #    EXIT
    #}
	#SET apiToken:(text)
	SET apiToken:("SharedAccessSignature sr=368b8d24-e2f2-4454-844b-93d29bc1dde6&sig=NZqVcdPZH9NFQkuQBvz65txwipMrhJ%2FrUfQBe%2BOk%2FBc%3D&skn=genzo&se=1708081185061")
	SETL headers["Authorization"]: (apiToken)
	#SETL headers["Content-Type"]:("application/json;odata=verbose") todo forse serve solo per le PUT
 

	# GET DEVICE LIST
	SETL url:("https://"+applicationURL+".azureiotcentral.com/api/devices?api-version=2022-07-31")
	HTTP_SEND_REQUEST(url) str_method:("GET") map_reqheaders:(headers) str_reqbody:("") val_respcode:respstat map_respheaders:respheaders str_respbody:str_respbody
	SETL mapRespBody: (fromJson(str_respbody))
	SETL devicesArray:(mapRespBody["value"])

	# GET DEVICE TEMPLATE LIST
	SETL url:("https://"+applicationURL+".azureiotcentral.com/api/deviceTemplates?api-version=2022-07-31")
	HTTP_SEND_REQUEST(url) str_method:("GET") map_reqheaders:(headers) str_reqbody:("") val_respcode:respstat map_respheaders:respheaders str_respbody:str_respbody
	SETL mapRespBody: (fromJson(str_respbody))
	SETL deviceTemplatesArray:(mapRespBody["value"])


	# GET DASHBOARD LIST
	# 1. iterare per ogni dashboard

	# For each device in the device list create new objects
	
	SETL objPosX:(2cm)
	SETL objPosY:(2cm)

	FOR i from:0 to:(LEN devicesArray-1) {
		SET deviceName: (devicesArray[i]["id"])
		CC "Core" GET_CLASS_ID classname:("device")
		CC "Core" CREATE_OBJ modelid:(a_dstmodelid) classid:(classid)
		SETL newobjid:(objid)
		CC "Core" SET_ATTR_VAL objid:(newobjid) attrname:("name") val:(deviceName)
		CC "Modeling" SET_OBJ_POS objid:(newobjid) x:(objPosX) y:(objPosY)
		SETL objPosY:(objPosY+5cm)
	}

	
	# todo accomedare
	
	FOR i from:0 to:(LEN deviceTemplatesArray-1) {
		SETL capabilityModel: (deviceTemplatesArray[i]["capabilityModel"])

		# find device template name in the id
		SETL deviceTemplateId: (capabilityModel["@id"])
		SETL deviceTemplateName:""

		# id: dtmi:applicationURL:<name>_<otherStuff>
		FOR j from:0 to:(LEN devicesArray-1) {
			SETL x:(search(deviceTemplateId, devicesArray[j]["id"], 0))		
			# TODO accomedare questo if the deviceName is in the id of the Device Template we found the device template we want 
			# find the device template with the same name as the device
			IF ( x != -1 ) {
				SETL deviceTemplateName:(devicesArray[j]["id"])	# id is the same as the device id
				SETL capabilities:(capabilityModel["contents"])
				#CC "AdoScript" INFOBOX("capabilities di " + devicesArray[j]["id"] + ":\n\n"+STR capabilities)
				FOR k from:0 to:(LEN capabilities-1) {
					SETL capabilityName:(capabilities[k]["name"])
					SETL type:(capabilities[k]["@type"])
					
					# if "@type": "Command",
					IF(type(type) = "string") {
						CC "Core" GET_CLASS_ID classname:("Device Operation")
						CC "Core" CREATE_OBJ modelid:(a_dstmodelid) classid:(classid)
						SETL deviceOperationId:(objid)
						CC "Core" SET_ATTR_VAL objid:(deviceOperationId) attrname:("name") val:(capabilityName)
						CC "Modeling" SET_OBJ_POS objid:(deviceOperationId) x:(objPosX) y:(objPosY)
						SETL objPosX:(objPosX+5cm)
					} ELSIF(type(type) = "array") {		# else if "@type": ["Telemetry","<capabilitySemanticType>","NumberValue"],
						SETL capabilitySemanticType:(lower(type[1])) # usually the psm_type is specified in the 2nd element of the "@type" array of the REST GET
						CC "Core" GET_CLASS_ID classname:("attribute")
						CC "Core" CREATE_OBJ modelid:(a_dstmodelid) classid:(classid)
						SETL attributeId:(objid)
						CC "Core" SET_ATTR_VAL objid:(attributeId) attrname:("name") val:(capabilityName)
						CC "Core" SET_ATTR_VAL objid:(attributeId) attrname:("psm_type") val:(capabilitySemanticType)
						CC "Modeling" SET_OBJ_POS objid:(attributeId) x:(objPosX) y:(objPosY)
						SETL objPosX:(objPosX+5cm)
					}
				}
			}
		}
	}

}